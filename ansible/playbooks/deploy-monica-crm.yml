---
- name: "Group Monica CRM hosts"
  hosts: "all"
  ignore_unreachable: true

  tasks:

    - name: "Group hosts by label"
      group_by:
        key: "label_monica_crm"
      when: |
        "monica-crm" in hostvars[inventory_hostname]["labels"]

- name: "Publish Monica CRM project to remote nodes"
  hosts: "label_monica_crm"
  become: true
  any_errors_fatal: true

  vars:
    MONICA_CRM_PROJECT: "{{ MONICA_CRM_PROJECT }}"

  tasks:

    - name: "Check if project directory exists"
      stat:
        path: "{{ MONICA_CRM_PROJECT }}"
      register: "project_dir"

    - name: "Create a timestamp variable"
      set_fact:
        timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
      when: |
        project_dir.stat.exists

    - name: "Create backup directory if it doesn't exist"
      file:
        path: "{{ MONICA_CRM_PROJECT }}_backup"
        state: "directory"
        owner: "root"
        group: "root"
        mode: "0755"
      when: |
        project_dir.stat.exists

    - name: "Create a zip backup of the Monica CRM project"
      archive:
        path: "{{ MONICA_CRM_PROJECT }}"
        dest: "{{ MONICA_CRM_PROJECT }}_backup/monica_crm_backup_{{ timestamp }}.zip"
        format: "zip"
      when: |
        project_dir.stat.exists

- name: "Clean and publish Monica CRM project to remote nodes"
  hosts: "label_monica_crm"
  become: true
  any_errors_fatal: true

  vars:
    MONICA_CRM_PROJECT: "{{ MONICA_CRM_PROJECT }}"

  tasks:

    - name: "Ensure destination directory exists"
      file:
        path: "{{ MONICA_CRM_PROJECT }}"
        state: "directory"
        owner: "root"
        group: "root"
        mode: "0755"

    - name: "Clean the destination directory"
      command: |
        rm -rf {{ MONICA_CRM_PROJECT }}/* {{ MONICA_CRM_PROJECT }}/.[!.]* {{ MONICA_CRM_PROJECT }}/..?*
      ignore_errors: true

    - name: "Copy Monica CRM project to remote nodes"
      synchronize:
        src: "{{ ANSIBLE_PROJECT }}/_dropfolder/monica-crm/"
        dest: "{{ MONICA_CRM_PROJECT }}"
        delete: true
        recursive: true
        rsync_opts:
          - "--chmod=D0755,F0644"

    - name: "Set permissions on Monica CRM project files"
      file:
        path: "{{ MONICA_CRM_PROJECT }}"
        state: "directory"
        recurse: true
        owner: "root"
        group: "root"
        mode: "0755"

- name: "Install Docker"
  hosts: "label_monica_crm"
  become: true
  any_errors_fatal: true

  tasks:

    - name: "Check if Docker is already installed"
      command: "docker --version"
      register: "docker_installed"
      ignore_errors: true

    - name: "Update package list (Debian/Ubuntu)"
      apt:
        update_cache: true
      when: |
        ansible_os_family == "Debian" and docker_installed.failed

    - name: "Install required packages (Debian/Ubuntu)"
      apt:
        name:
          - "apt-transport-https"
          - "ca-certificates"
          - "curl"
          - "software-properties-common"
        state: "present"
      when: |
        ansible_os_family == "Debian" and docker_installed.failed

    - name: "Add Docker's official GPG key (Debian/Ubuntu)"
      apt_key:
        url: "https://download.docker.com/linux/{{ 'ubuntu' if ansible_distribution == 'Ubuntu' else 'debian' }}/gpg"
        state: "present"
      when: |
        ansible_os_family == "Debian" and docker_installed.failed

    - name: "Add Docker repository (Debian/Ubuntu)"
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/{{ 'ubuntu' if ansible_distribution == 'Ubuntu' else 'debian' }} $(lsb_release -cs) stable"
        state: "present"
      when: |
        ansible_os_family == "Debian" and docker_installed.failed

    - name: "Update package list after adding Docker repository (Debian/Ubuntu)"
      apt:
        update_cache: true
      when: |
        ansible_os_family == "Debian" and docker_installed.failed

    - name: "Install Docker (Debian/Ubuntu)"
      apt:
        name: "docker-ce"
        state: "present"
      when: |
        ansible_os_family == "Debian" and docker_installed.failed

    - name: "Update package list (Fedora)"
      dnf:
        update_cache: true
      when: |
        ansible_os_family == "RedHat" and docker_installed.failed

    - name: "Install required packages (Fedora)"
      dnf:
        name:
          - "dnf-plugins-core"
        state: "present"
      when: |
        ansible_os_family == "RedHat" and docker_installed.failed

    - name: "Add Docker repository (Fedora)"
      command: "dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo"
      when: |
        ansible_os_family == "RedHat" and docker_installed.failed

    - name: "Install Docker (Fedora)"
      dnf:
        name: "docker-ce"
        state: "present"
      when: |
        ansible_os_family == "RedHat" and docker_installed.failed

    - name: "Ensure Docker service is running and enabled"
      service:
        name: "docker"
        state: "started"
        enabled: "true"
      when: |
        docker_installed.failed

    - name: "Add current user to docker group"
      user:
        name: "{{ ansible_user }}"
        groups: "docker"
        append: "true"
      when: |
        docker_installed.failed

- name: "Deploy Monica CRM"
  hosts: "label_monica_crm"
  become: true
  any_errors_fatal: true
  vars:
    MONICA_CRM_PROJECT: "{{ MONICA_CRM_PROJECT }}"

  tasks:

    - name: "Remove existing .env file if it exists"
      file:
        path: "{{ MONICA_CRM_PROJECT }}/.env"
        state: "absent"
      when: |
        hostvars[inventory_hostname].CF_TUNNEL_TOKEN is defined

    - name: "Generate .env file with token"
      copy:
        dest: "{{ MONICA_CRM_PROJECT }}/.env"
        content: |
          MONICA_DB_NAME={{ MONICA_DB_NAME }}
          MONICA_DB_USER={{ MONICA_DB_USER }}
          MONICA_DB_PASSWORD={{ MONICA_DB_PASSWORD }}
      when: |
        hostvars[inventory_hostname].CF_TUNNEL_TOKEN is defined

    - name: "Ensure Docker networks exist"
      mkh_ensure_docker_network:
        networks:
          - name: "panoramicovphc-vpc-net"
          - name: "panoramicovphc-db-net"

    - name: "Ensure Docker volumes meet expectations"
      mkh_ensure_docker_volume:
        volumes:
          - name: "panoramicovphc-monica-app-storage"
            device:
              path: "/mkh/srv/panoramicovphc/monica-app-storage"
              permissions: '0755'
              puid: '1000'
              pgid: '1000'
          - name: "panoramicovphc-monica-db-data"
            device:
              path: "/mkh/srv/panoramicovphc/monica-db-data"
              permissions: '0755'
              puid: '1000'
              pgid: '1000'

    - name: "Pull Docker Compose services"
      command: |
        docker compose pull
      args:
        chdir: "{{ MONICA_CRM_PROJECT }}"

    - name: "Start Docker Compose services"
      command: |
        docker compose up -d --force-recreate --remove-orphans --build
      args:
        chdir: "{{ MONICA_CRM_PROJECT }}"

    - name: "Prune unused Docker images"
      command: |
        docker image prune --force

- name: "Release Monica CRM"
  hosts: "label_monica_crm"
  become: true
  any_errors_fatal: true

  tasks:

    - name: "Ensure Cloudflared Tunnels"
      mkh_ensure_cfd_tunnel:
        account_id: "{{ CF_ACCOUNT_ID }}"
        api_token: "{{ CF_TUNNEL_API_TOKEN }}"
        tunnel_name: "{{ CF_TUNNEL_NAME }}"
        zone_id: "{{ CF_ZONE_ID }}"
        private_service: "{{ CF_SERVICE }}"
        public_hostname: "{{ CF_HOSTNAME }}"
